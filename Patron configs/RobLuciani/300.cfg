[mcu rpi]
serial: /tmp/klipper_host_mcu
[mcu head0]
canbus_uuid=8e774621ca4e
[adxl345]
cs_pin: rpi:None
spi_speed:2500000
[resonance_tester]
accel_chip: adxl345
probe_points:
  150,150,10  # an example
 
[mcu]
serial: /dev/serial/by-id/usb-Klipper_sam4e8e_00313953324A46533133303336303434-if00

[printer]
kinematics: corexy
max_velocity: 500
max_accel: 7500
#max_accel_to_decel:7000
square_corner_velocity:5
max_z_velocity: 80
max_z_accel: 300
[include webui_macros.cfg]
[force_move]
enable_force_move: True
[input_shaper]
#shaper_type: mzv
#shaper_freq_x:32.2
#shaper_freq_y:38.4
[pause_resume]

# This file contains common pin mappings for Duet2 Eth/Wifi boards
# that have the Duex expansion board. To use this config, the firmware
# should be compiled for the SAM4E8E.

# See the example.cfg file for a description of available parameters.

## Drivers
# Here are the pins for the 10 stepper drivers supported by a Duet2 board
# | Drive |  DIR pin |  STEP pin |  ENDSTOP pin |  SPI EN pin |
# |-------|----------|-----------|--------------|-------------|
# | X     |  PD11    |  PD6      |  PC14        |  PD14       |
# | Y     |  PD12    |  PD7      |  PA2         |  PC9        |
# | Z     |  PD13    |  PD8      |  PD29        |  PC10       |
# | E0    |  PA1     |  PD5      |  PD10        |  PC17       |
# | E1    |  PD9     |  PD4      |  PC16        |  PC25       |
# | E2    |  PD28    |  PD2      |  PE0*        |  PD23       |
# | E3    |  PD22    |  PD1      |  PE1*        |  PD24       |
# | E4    |  PD16    |  PD0      |  PE2*        |  PD25       |
# | E5    |  PD17    |  PD3      |  PE3*        |  PD26       |
# | E6    |  PC0     |  PD27     |  PA17*       |  PB14       |
# Pins marked with asterisks (*) are only assigned to these functions
# if no duex is connected. If a duex is connected, these endstops are
# remapped to the SX1509 on the Duex (unfortunately they can't be used
# as endstops in klipper, however one may use them as digital outs or
# PWM outs). The SPI EN pins are required for the TMC2660 drivers (use
# the SPI EN pin as 'cs_pin' in the respective config block). The
# **enable pin for all steppers** is TMC_EN = !PC6.
#
## Fans
# | FAN  |          PIN          |
# |------|-----------------------|
# | FAN0 |  PC23                 |
# | FAN1 |  PC26                 |
# | FAN2 |  PA0                  |
# | FAN3 |  sx1509_duex:PIN_12*  |
# | FAN4 |  sx1509_duex:PIN_7*   |
# | FAN5 |  sx1509_duex:PIN_6*   |
# | FAN6 |  sx1509_duex:PIN_5*   |
# | FAN7 |  sx1509_duex:PIN_4*   |
# | FAN8 |  sx1509_duex:PIN_15*  |
# Pins marked with (*) assume the following sx1509 config section:
[sx1509 duex]
i2c_address: 62
#
## Heaters and Thermistors
# | Extruder Drive |  HEAT pin |  TEMP pin |
# |----------------|-----------|-----------|
# | BED            |  PA19     |  PC13     |
# | E0             |  PA20     |  PC15     |
# | E1             |  PA16     |  PC12     |
# | E2             |  PC3      |  PC29     |
# | E3             |  PC5      |  PC30     |
# | E4             |  PC8      |  PC31     |
# | E5             |  PC11     |  PC27     |
# | E6             |  PA15     |  PA18     |
#
## Misc pins
# |    Name     |   Pin   |
# |-------------|---------|
# | ZProbe_IN   |  PC1    |
# | PS_ON       |  PD15   |
# | LED_ONBOARD |  PC2    |
# | SPI0_CS0    |  PC24   |
# | SPI0_CS1    |  PB2    |
# | SPI0_CS2    |  PC18   |
# | SPI0_CS3    |  PC19   |
# | SPI0_CS4    |  PC20   |
# | SPI0_CS5    |  PA24   |
# | SPI0_CS6    |  PE1*   |
# | SPI0_CS7    |  PE2*   |
# | SPI0_CS8    |  PE3*   |
# | SX1509_IRQ  |  PA17*  |
# | SG_TST      |  PE0*   |
# | ENC_SW      |  PA7    |
# | ENC_A       |  PA8    |
# | ENC_B       |  PC7    |
# | LCD_DB7     |  PD18   |
# | LCD_DB6     |  PD19   |
# | LCD_DB5     |  PD20   |
# | LCD_DB4     |  PD21   |
# | LCD_RS      |  PC28   |
# | LCD_E       |  PA25   |
# Pins marked with one asterisk (*) replace E2_STOP-E6_STOP if a duex is present
# For the remaining pins check the schematics provided here: https://github.com/T3P3/Duet

[stepper_x]
step_pin: PD6
dir_pin: PD11
enable_pin: !PC6
#step_distance: .00625
rotation_distance :40
microsteps: 16
#full_steps_per_rotation: 400
endstop_pin: ^PC14
position_endstop: 303
position_max: 305
position_min: -2
homing_speed: 300
[tmc2660 stepper_x]
cs_pin: PD14 # X_SPI_EN Required for communication
spi_bus: usart1 # All TMC2660 drivers are connected to USART1

interpolate: True # 1/16 micro-steps interpolated to 1/256
run_current: 1.05
sense_resistor: 0.051
idle_current_percent: 100
#driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 2
#driver_CHM: 0
driver_HEND: 3
driver_HSTRT: 5
driver_TOFF: 5
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3

[stepper_y]
step_pin: PD7
dir_pin: PD12
enable_pin: !PC6
#step_distance: .00625
rotation_distance :40
microsteps: 16
#full_steps_per_rotation: 400
endstop_pin: ^PA2
position_endstop: 285
position_max: 302
position_min: -5
homing_speed: 300
[tmc2660 stepper_y]
cs_pin: PC9
spi_bus: usart1

interpolate: True
run_current: 1.05
sense_resistor: 0.051
idle_current_percent: 100
#driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 2
#driver_CHM: 0
driver_HEND: 3
driver_HSTRT: 5
driver_TOFF: 5
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3

[stepper_z]
step_pin: PD2
dir_pin: PD28
enable_pin: !PC6
#step_distance: .0025
full_steps_per_rotation: 200
rotation_distance :8
microsteps: 16
endstop_pin: probe:z_virtual_endstop
position_max: 400
position_min: -2
homing_speed: 20
[tmc2660 stepper_z]
cs_pin:  PD23
spi_bus: usart1

interpolate: True
run_current: 1
idle_current_percent: 40
sense_resistor: 0.051
driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 0
#driver_CHM: 0
driver_HEND: 3
driver_HSTRT: 6
driver_TOFF: 5
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3

#On drive E4
[stepper_z1]
step_pin: PD1
dir_pin: !PD22
enable_pin: !PC6
#step_distance: .0025
full_steps_per_rotation: 200
rotation_distance :8
microsteps: 16
[tmc2660 stepper_z1]
cs_pin: PD24
spi_bus: usart1

interpolate: True
run_current: 1
idle_current_percent: 40
sense_resistor: 0.051
driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 0
#driver_CHM: 0
driver_HEND: 3
driver_HSTRT: 6
driver_TOFF: 5
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3

#On drive E5
[stepper_z2]
step_pin: PD0
dir_pin: PD16
enable_pin: !PC6
#step_distance: .0025
full_steps_per_rotation: 200
rotation_distance :8
microsteps: 16
[tmc2660 stepper_z2]
cs_pin: PD25
spi_bus: usart1

interpolate: True
run_current: 1
idle_current_percent: 40
sense_resistor: 0.051
driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 0
#driver_CHM: 0
driver_HEND: 3
driver_HSTRT: 6
driver_TOFF: 5
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3

#On drive E6
[stepper_z3]
step_pin: PD3
dir_pin: !PD17
enable_pin: !PC6
#step_distance: .0025
full_steps_per_rotation: 200
rotation_distance :8
microsteps: 16
[tmc2660 stepper_z3]
cs_pin: PD26
spi_bus: usart1

interpolate: True
run_current: 1
idle_current_percent: 40
sense_resistor: 0.051
driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 0
#driver_CHM: 0
driver_HEND: 3
driver_HSTRT: 6
driver_TOFF: 5
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3

#On drive E0
#[extruder]
#step_pin: PD5
#dir_pin: !PA1 #jake allen extruder is !formbot reg
#enable_pin: !PC6
#step_distance: .00145985
#microsteps: 16
#rotation_distance :4.6715
#nozzle_diameter: 0.400
#filament_diameter: 1.750
#heater_pin: !PA20
#sensor_type: dyze500
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: PC15
#control : pid
#pid_kp : 16.373
#pid_ki : 0.654
#pid_kd : 102.534
#min_temp: -50
#max_temp: 450
#max_extrude_only_distance: 151.0
#[tmc2660 extruder]
#cs_pin: PC17
#spi_bus: usart1

#interpolate: True
#run_current: .36
#idle_current_percent: 30
#sense_resistor: 0.051
#driver_TBL: 2
#driver_RNDTF: 0
#driver_HDEC: 1
#driver_CHM: 0
#driver_HEND: 3
#driver_HSTRT: 5
#driver_TOFF: 6
#driver_SEIMIN: 0
#driver_SEDN: 0
#driver_SEMAX: 0
#driver_SEUP: 0
#driver_SEMIN: 0
#driver_SFILT: 1
#driver_SGT: 0
#driver_SLPH: 0
#driver_SLPL: 0
#driver_DISS2G: 0
#driver_TS2G: 3


[extruder]
step_pin: head0:PB3
dir_pin: head0:PB4
enable_pin: !head0:PB6
heater_pin: head0:PA6  # "HEAT"
rotation_distance :4.6715
microsteps: 16
nozzle_diameter: 0.400
filament_diameter: 1.750
sensor_type: dyze500
sensor_pin: head0:PA0 # "THERMISTOR"
pullup_resistor: 2200 # The board uses a 2.2k ohm pullup to work with a PT1000 
min_temp: 0
max_temp: 450
max_extrude_only_distance: 151.0
[tmc2209 extruder]
uart_pin: head0:PA10
tx_pin: head0:PA9
interpolate: True
run_current: 0.35
sense_resistor: 0.110
hold_current: 0.15
stealthchop_threshold: 0
driver_HEND: 3
driver_HSTRT: 2
driver_TOFF: 3
[thermistor dyze500]
temperature1 : 25
resistance1 : 4500000
temperature2 : 200
resistance2 : 8070
temperature3 : 400
resistance3 : 253
[verify_heater extruder]
max_error: 180

#check_gain_time:

hysteresis: 6

#heating_gain: 2


[heater_bed]
heater_pin: !PA19
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC13
#control: pid
min_temp: 0
max_temp: 135
#control : pid
#pid_kp : 60.625
#pid_ki : 1.727
#pid_kd : 531.987
# Fan0
[fan]
pin: PC23
off_below:.3
cycle_time:.008
#hardware_pwm: True
#RPI TEMP
#RPI TEMP
#[temperature_sensor rpi]
#sensor_type: rpi_temperature
#[temperature_sensor DuetWiFi]
#sensor_type: temperature_mcu
# temperature sensors that are reported via the M105 command.
# Fan1 controlled by extruder
[temperature_fan rpi]
pin:PC26
#fan_speed: .6
#heater:extruder,heater_bed
sensor_type: rpi_temperature
max_speed: 1
min_speed: 0
off_below:.2
control : pid
pid_kp : 30
pid_ki : 1
pid_kd : 900
pid_deriv_time:90
min_temp:10
max_temp:65
target_temp: 55.0
[heater_fan hotend]
pin: head0:PA8   # "FAN1"
heater: extruder
heater_temp: 45
fan_speed: 1

# Fan2, controlled by E0_TEMP
[controller_fan drivers]
pin:sx1509_duex:PIN_15
heater: extruder,heater_bed
fan_speed:1
hardware_pwm: True
#[fan_generic chamber]
#pin: sx1509_duex:PIN_4
#hardware_pwm: True

[temperature_fan Duet_WiFi]
pin:PA0
#fan_speed: .6
#heater:extruder,heater_bed
sensor_type: temperature_mcu
max_speed: 1
min_speed: 0
off_below:.2
control : pid
pid_kp : 30
pid_ki : 1
pid_kd : 900
pid_deriv_time:90
#cycle_time:50
#hardware_pwm: True
min_temp:10
max_temp:60
target_temp: 30.0
sensor_temperature1:20
sensor_adc1: 0.434371
[temperature_fan chamber]
pin:sx1509_duex:PIN_4
#max_power:
#shutdown_speed:
#cycle_time:
hardware_pwm: True
#kick_start_time:
off_below:.6
#   See the "fan" section in example.cfg for a description of the
#   above parameters.
sensor_type:EPCOS 100K B57560G104F
sensor_pin:PC12
control : pid
pid_kp : 30
pid_ki : 1
pid_kd : 900
pid_deriv_time:120
min_temp:0
max_temp:80
#   See the "extruder" section in example.cfg for a description of the
#   above parameters.
target_temp: 50.0
#   A temperature (in Celsius) that will be the target temperature.
#   The default is 40 degrees.
max_speed: 1
min_speed: 0.5
gcode_id:Chamber


#[temperature_sensor chamber]
#sensor_type:EPCOS 100K B57560G104F
#sensor_pin:PC12
#min_temp:
#max_temp:
#   See the heater section in example.cfg for the definition of the
#   above parameters.
#gcode_id:C
#   See the heater_generic section above for the definition of this
#   parameter.

# "probe:z_virtual_endstop" pin is also created (see the "probe"
# section above for the details).
[bltouch]
sensor_pin:^PC1
control_pin:!PA15
pin_move_time: 0.3
stow_on_each_sample: False
#   This determines if Klipper should command the pin to move up
#   between each probe attempt when performing a multiple probe
#   sequence. Read the directions in docs/BLTouch.md before setting
#   this to False. The default is True.
probe_with_touch_mode: False
#set_output_mode:5V
x_offset:-25
y_offset:3
#z_offset:.95
speed: 14
lift_speed: 14
samples: 1
samples_result: median
sample_retract_dist: 5.0
samples_tolerance: 0.01   
samples_tolerance_retries: 3
#   See the "probe" section for information on these parameters.

[safe_z_home]
home_xy_position: 175,150
speed: 300
z_hop: 6
z_hop_speed: 15

[quad_gantry_level]

#   Use QUAD_GANTRY_LEVEL to level a gantry.
gantry_corners:
   -68,-10
   368,380
#   Min & Max gantry corners - measure from nozzle at MIN (0,0) and MAX (250,250) to respective belt positions
points:
   50,25
   50,275
   300,275
   300,25
#   Probe points
speed: 300
horizontal_move_z:10
retries: 5
retry_tolerance: 0.0125
max_adjust: 10

[bed_mesh]
mesh_min: 20,20
mesh_max: 280,280
probe_count: 10
fade_start: 1.0
fade_end: 4.0
algorithm: bicubic
speed: 300
[static_digital_output onboard_led]
pins: !PC2

#[output_pin FAN3]
#pin: sx1509_duex:PIN_12
#pwm: True
#hardware_pwm: True # Only hardware PWM fans are supported

[output_pin ledgreen]
pin: sx1509_duex:PIN_7
pwm: True
hardware_pwm: True
value:1

[output_pin ledred]
pin: sx1509_duex:PIN_6
pwm: True
hardware_pwm: True
value:1

[output_pin ledblue]
pin: sx1509_duex:PIN_5
pwm: True
hardware_pwm: True
value:1


#[output_pin GPIO1] # General purpose pin broken out on the duex
#pin: sx1509_duex:PIN_11
#pwm: False
#value: 1

# Filament Switch Sensor.  Support for filament insert and runout detection
#[filament_switch_sensor my_sensor]
#pause_on_runout: True
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode:
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode.  It may be useful to
#   increase this delay if Octoprint exhibits strange pause behavior.
#   Default is 0.5 seconds.
#switch_pin:PD10
#   The pin on which the switch is connected. This parameter must be
#   provided.



[display_status]
[input_shaper]
#// Fitted shaper '2hump_ei' frequency = 58.1 Hz (vibrations = 8.4%)// Fitted shaper '2hump_ei' frequency = 54.9 Hz (vibrations = 8.8%)
#// Fitted shaper 'mzv' frequency = 49 Hz (vibrations = 16.1%)// Fitted shaper 'mzv' frequency = 44 Hz (vibrations = 15.5%)
#shaper_freq_x: 41
#   A frequency (in Hz) of the input shaper for X axis. This is
#   usually a resonance frequency of X axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for X axis.
#shaper_freq_y: 73
#   A frequency (in Hz) of the input shaper for Y axis. This is
#   usually a resonance frequency of Y axis that the input shaper
#   should suppress. For more complex shapers, like 2- and 3-hump EI
#   input shapers, this parameter can be set from different
#   considerations. The default value is 0, which disables input
#   shaping for Y axis.
shaper_type: mzv
#   A type of the input shaper to use for both X and Y axes. Supported
#   shapers are zv, mzv, zvd, ei, 2hump_ei, and 3hump_ei. The default
#   is mzv input shaper.
#shaper_type_x:
#shaper_type_y:
#   If shaper_type is not set, these two parameters can be used to
#   configure different input shapers for X and Y axes. The same
#   values are supported as for shaper_type parameter.
#damping_ratio_x: 0.1
#damping_ratio_y: 0.1
#   Damping ratios of vibrations of X and Y axes used by input shapers
#   to improve vibration suppression. Should not be changed without
#   some proper measurements, e.g. with an accelerometer. Default
#   value is 0.1 which is a good all-round value for most printers.

# Support for ADXL345 accelerometers. This support allows one to query
# accelerometer measurements from the sensor. This enables an
# ACCELEROMETER_MEASURE command (see docs/G-Codes.md for more
# information). The default chip name is "default", but one may
# specify an explicit name (eg, [adxl345 my_chip_name]).
#[adxl345]
#axes_map: x,y,z
#   The accelerometer axis for each of the printer's x, y, and z axes.
#   This may be useful if the accelerometer is mounted in an
#   orientation that does not match the printer orientation. For
#   example, one could set this to "y,x,z" to swap the x and y axes.
#   It is also possible to negate an axis if the accelerometer
#   direction is reversed (eg, "x,z,-y"). The default is "x,y,z".
#rate: 3200
#   Output data rate for ADXL345. ADXL345 supports the following data
#   rates: 3200, 1600, 800, 400, 200, 100, 50, and 25. Note that it is
#   not recommended to change this rate from the default 3200, and
#   rates below 800 will considerably affect the quality of resonance
#   measurements.
#cs_pin:
#   The SPI enable pin for the sensor. This parameter must be
#   provided.
#spi_speed: 5000000
#   The SPI speed (in hz) to use when communicating with the chip.
#   The default is 5000000.
#spi_bus:
#spi_software_sclk_pin:
#spi_software_mosi_pin:
#spi_software_miso_pin:
#   These optional parameters allow one to customize the SPI settings
#   used to communicate with the chip.

# Support for resonance testing and automatic input shaper
# calibration. In order to use most of the functionality of this
# module, additional software dependencies must be installed; refer to
# docs/Measuring_Resonances.md for more information.
#[resonance_tester]
#probe_points:
#   A list of X,Y,Z coordinates of points (one point per line) to test
#   resonances at. At least one point is required. Make sure that all
#   points with some safety margin in XY plane (~a few centimeters)
#   are reachable by the toolhead.
#accel_chip:
#   A name of the accelerometer chip to use for measurements. If
#   adxl345 chip was defined without an explicit name, this parameter
#   can simply reference it as "accel_chip: adxl345", otherwise an
#   explicit name must be supplied as well, e.g. "accel_chip: adxl345
#   my_chip_name". Either this, or the next two parameters must be
#   set.
#accel_chip_x:
#accel_chip_y:
#   Names of the accelerometer chips to use for measurements for each
#   of the axis. Can be useful, for instance, on bed slinger printer,
#   if two separate accelerometers are mounted on the bed (for Y axis)
#   and on the toolhead (for X axis). These parameters have the same
#   format as 'accel_chip' parameter. Only 'accel_chip' or these two
#   parameters must be provided.
#min_freq: 5
#   Minimum frequency to test for resonances. The default is 5 Hz.
#max_freq: 120
#   Maximum frequency to test for resonances. The default is 120 Hz.
#accel_per_hz: 75
#   This parameter is used to determine which acceleration to use to
#   test a specific frequency: accel = accel_per_hz * freq. Higher the
#   value, the higher is the energy of the oscillations. Can be set to
#   a lower than the default value if the resonances get too strong on
#   the printer. However, lower values make measurements of
#   high-frequency resonances less precise. The default value is 75
#   (mm/sec).
#hz_per_sec: 1
#   Determines the speed of the test. When testing all frequencies in
#   range [min_freq, max_freq], each second the frequency increases by
#   hz_per_sec. Small values make the test slow, and the large values
#   will decrease the precision of the test. The default value is 1.0
#   (Hz/sec == sec^-2).

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.055000, 0.070000, 0.037500, 0.055000, 0.062500, 0.057500, 0.047500, 0.020000, 0.040000, 0.087500
#*# 	0.035000, 0.025000, 0.015000, 0.037500, 0.037500, 0.035000, 0.045000, 0.022500, 0.015000, 0.055000
#*# 	0.027500, 0.017500, 0.022500, 0.042500, 0.047500, 0.040000, 0.050000, 0.007500, -0.007500, 0.022500
#*# 	-0.012500, 0.010000, 0.000000, 0.052500, 0.037500, 0.030000, 0.022500, -0.010000, -0.015000, -0.007500
#*# 	-0.030000, 0.005000, -0.002500, 0.030000, 0.027500, 0.025000, 0.027500, -0.015000, -0.030000, -0.017500
#*# 	-0.030000, 0.000000, 0.015000, 0.035000, 0.032500, 0.027500, 0.027500, -0.010000, -0.032500, -0.015000
#*# 	-0.002500, 0.025000, 0.012500, 0.025000, 0.027500, 0.030000, 0.030000, 0.000000, -0.015000, 0.000000
#*# 	-0.012500, 0.020000, -0.002500, 0.017500, 0.005000, 0.007500, 0.007500, -0.012500, -0.020000, -0.005000
#*# 	0.007500, 0.040000, 0.005000, 0.030000, 0.015000, 0.015000, 0.022500, 0.002500, -0.007500, 0.030000
#*# 	0.050000, 0.085000, 0.077500, 0.097500, 0.075000, 0.067500, 0.065000, 0.042500, 0.040000, 0.077500
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 10
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 10
#*# max_y = 279.93
#*# mesh_x_pps = 2
#*# max_x = 279.93
#*#
#*# [bltouch]
#*# z_offset = 1.78
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 22.546
#*# pid_ki = 1.184
#*# pid_kd = 107.375
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 60.535
#*# pid_ki = 1.950
#*# pid_kd = 469.907
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 71.6
#*# shaper_type_y = mzv
#*# shaper_freq_y = 48.0
